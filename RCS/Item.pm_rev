head	1.3;
access;
symbols;
locks
	root:1.3; strict;
comment	@# @;


1.3
date	2004.05.23.21.38.47;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.23.00.38.33;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.21.13.55.21;	author root;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@### //////////////////////////////////////////////////////////////////////////
#
#	TOP
#

=head1 NAME

SML::Item - parsed SML item object

=cut

#------------------------------------------------------
# (C) Daniel Peder & Infoset s.r.o., all rights reserved
# http://www.infoset.com, Daniel.Peder@@infoset.com
#------------------------------------------------------

###													###
###	size of <TAB> in this document is 4 characters	###
###													###

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: package
#

	package SML::Item;


### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: version
#

	use vars qw( $VERSION $VERSION_LABEL $REVISION $REVISION_DATETIME $REVISION_LABEL $PROG_LABEL );

	$VERSION           = '0.10';
	
	$REVISION          = (qw$Revision: 1.2 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/05/23 00:38:33 $)[1,2]);
	$REVISION_LABEL    = '$Id: Item.pm_rev 1.2 2004/05/23 00:38:33 root Exp root $';
	$VERSION_LABEL     = "$VERSION (rev. $REVISION $REVISION_DATETIME)";
	$PROG_LABEL        = __PACKAGE__." - ver. $VERSION_LABEL";

=pod

 $Revision: 1.2 $
 $Date: 2004/05/23 00:38:33 $

=cut


### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: debug
#

	use vars qw( $DEBUG ); $DEBUG=0;
	

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: constants
#

	# use constant	name		=> 'value';
	

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: modules use
#

	require 5.005_62;

	use strict                  ;
	use warnings                ;
	
	use	SML::Parser				;
	

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: methods
#

=head1 METHODS

=over 4

=cut



### ##########################################################################

=item	new ( [ \@@item ] )

=cut

### --------------------------------------------------------------------------
sub		new
### --------------------------------------------------------------------------
{
	my( $proto, $self ) = @@_;
	
	$self	||= [];
	bless( $self, (ref( $proto ) || $proto ));
	
	$self
}


### ##########################################################################

=item	get_type ( ) : string

Get type of item, 'E'lement, 'C'omment, 'T'ext.

=cut

### --------------------------------------------------------------------------
sub		get_type
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	$self->[0]
}



### ##########################################################################

=item	is_element ( ) : bool

Return true if item is element.

=cut

### --------------------------------------------------------------------------
sub		is_element
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	
	$self->[0] eq 'E'

}


### ##########################################################################

=item	is_comment ( ) : bool

Return true if item is comment.

=cut

### --------------------------------------------------------------------------
sub		is_comment
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	
	$self->[0] eq 'C'

}


### ##########################################################################

=item	is_text ( ) : bool

Return true if item is text.

=cut

### --------------------------------------------------------------------------
sub		is_text
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	
	$self->[0] eq 'T'

}


### ##########################################################################

=item	is_pi ( ) : bool

Return true if item is pi (processing instruction), eg it has one of
'!', '?', '/' modifiers in tag name, see example:

 <!section>
 <?my-pi>
 </my-tag>
 
Yes, the closing tag is also considered processing instruction, however,
it could be tested by B< is_closing_tag() > method.


=cut

### --------------------------------------------------------------------------
sub		is_pi
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	
	length( $self->get_pi()||'' )

}


### ##########################################################################

=item	is_opening ( ) : bool

Return true if item is opening tag eg. element !pi.

=cut

### --------------------------------------------------------------------------
sub		is_opening
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	
	$self->is_element and not($self->is_pi)

}


### ##########################################################################

=item	is_closing ( ) : bool

Return true if item is closing tag eg. get_pi() eq '/'.

=cut

### --------------------------------------------------------------------------
sub		is_closing
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	
	( $self->get_pi()||'' ) eq '/'

}


### ##########################################################################

=item	get_pi ( ) : string

Get pi (processing instruction) mark. Valid only for element type of item, 
otherwise B< false > (by empty string '').

=cut

### --------------------------------------------------------------------------
sub		get_pi
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	$self->is_element ? $self->[1] : '';
}


### ##########################################################################

=item	get_name ( ) : string

Get name of element tag. Valid only for element type of item, 
otherwise B< false > (by empty string '').

=cut

### --------------------------------------------------------------------------
sub		get_name
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	$self->is_element ? $self->[2] : '';
}


### ##########################################################################

=item	get_text ( ) : string

Get text value of text or comment item type. For element type 
return allway B< false > (by empty string '').

=cut

### --------------------------------------------------------------------------
sub		get_text
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	$self->is_element ? '' : $self->[1];
}


### ##########################################################################

=item	get_attributes_str ( ) : string

Get attributes part of tag body as plain uparsed, unmodified string value. 
Valid only for element type of item, otherwise  B< false (by empty string '')>.

=cut

### --------------------------------------------------------------------------
sub		get_attributes_str
### --------------------------------------------------------------------------
{
	my( $self )=@@_;
	$self->is_element ? $self->[3] : '';
}


### ##########################################################################

=item	get_attribute_value ( $name [, $position ] ) : string

Get value of named attribute, optionally from specified position.

=cut

### --------------------------------------------------------------------------
sub		get_attribute_value
### --------------------------------------------------------------------------
{
	my( $self, $name, $position )=@@_;
	
		$position	||= 0;
	my	$attr		= $self->get_attribute( $name );
		return undef unless $attr;
		
	$attr->[$position];
}


### ##########################################################################

=item	get_attribute ( $name )

Get attribute by B<$name> represented as arrayref of corresponding values.

=cut

### --------------------------------------------------------------------------
sub		get_attribute
### --------------------------------------------------------------------------
{
	my( $self, $name )=@@_;
	
	my	$attrs	=	$self->get_attributes();
		return undef unless $attrs;

	$attrs->{$name};
}


### ##########################################################################

=item	get_attributes ( )

Get parsed attributes.

=cut

### --------------------------------------------------------------------------
sub		get_attributes
### --------------------------------------------------------------------------
{
	my( $self )=@@_;

	if( !$self->[4] && $self->is_element() && !$self->is_closing() ) # note: all elements can get attributes except closing tags
	{
		$self->[4] = SML::Parser->parse_attributes( $self->get_attributes_str );
	}
	$self->[4]
}


### ##########################################################################

=item	get_attributes_names ( )

Get list of all named attributes.

=cut

### --------------------------------------------------------------------------
sub		get_attributes_names
### --------------------------------------------------------------------------
{
	my( $self )=@@_;

	my	$attrs	=	$self->get_attributes();
		return undef unless $attrs;

	my	@@names	= keys %$attrs;
	wantarray ? @@names : \@@names ;
}








=back

=cut


1;

__DATA__

__END__

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: TODO
#

=head1 TODO	


=cut
@


1.2
log
@*** empty log message ***
@
text
@d38 3
a40 3
	$REVISION          = (qw$Revision: 1.1 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/05/21 13:55:21 $)[1,2]);
	$REVISION_LABEL    = '$Id: Item.pm_rev 1.1 2004/05/21 13:55:21 root Exp root $';
d46 2
a47 2
 $Revision: 1.1 $
 $Date: 2004/05/21 13:55:21 $
d218 19
d239 1
a239 1
Return true if item is closing tag eg get_pi() eq '/'.
@


1.1
log
@Initial revision
@
text
@d39 2
a40 2
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/05/19 19:49:28 $)[1,2]);
	$REVISION_LABEL    = '$Id: Item.pm_rev 1.1 2004/05/19 19:49:28 root Exp root $';
d47 1
a47 1
 $Date: 2004/05/19 19:49:28 $
d78 2
d107 20
a126 1
	bless $self, ref( $proto ) || $proto;
d130 1
d133 1
a133 1
=item	is_element ( )
d152 1
a152 1
=item	is_comment ( )
d171 1
a171 1
=item	is_text ( )
d190 1
a190 1
=item	is_pi ( )
d218 1
a218 1
=item	is_closing ( )
d237 1
a237 1
=item	get_pi ( )
d240 1
a240 1
otherwise B< false (by empty string '')>.
d255 1
a255 1
=item	get_name ( )
d258 1
a258 1
otherwise B< false (by empty string '')>.
d273 1
a273 1
=item	get_text ( )
d276 1
a276 1
return allway B< false (by empty string '')>.
d291 1
a291 1
=item	get_attributes_str ( )
d309 1
a309 1
=item	get_attribute_value ( $name [, $position ] )
d323 1
d343 21
d368 7
d376 15
a390 1
	$self->[4]{$name};
d392 2
@
